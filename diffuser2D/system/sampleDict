/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2006                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/

FoamFile
{
    version         2.0;
    format          ascii;
    class           dictionary;
    location        system;
    object          sampleDict;
}

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
type sets;
// Set output format : choice of
//      xmgr
//      jplot
//      gnuplot
//      raw
setFormat raw;

// Surface output format. Choice of
//      null        : suppress output
//      foam        : separate points, faces and values file
//      vtk         : VTK ascii format
//      raw         : x y z value format for use with e.g. gnuplot 'splot'.
//
// Note:
// other formats such as obj, stl, etc can also be written (by proxy)
// but without any values!
//surfaceFormat vtk;

// interpolationScheme. choice of
//      cell          : use cell-centre value only; constant over cells (default)
//      cellPoint     : use cell-centre and vertex values
//      cellPointFace : use cell-centre, vertex and face values.
// 1] vertex values determined from neighbouring cell-centre values
// 2] face values determined using the current face interpolation scheme
//    for the field (linear, gamma, etc.)
interpolationScheme cellPoint;

// Fields to sample.
fields
(
//    U
    UMean
//    UPrime2Mean
    turbulenceProperties:R
  //  T
  //  CO
  //  CO2
  //  H2
  //  H2O
  //  N2
  //  O2
  //  OH
  //  CH4
);


// Set sampling definition: choice of
//      uniform             evenly distributed points on line
//      face                one point per face intersection
//      midPoint            one point per cell, inbetween two face intersections
//      midPointAndFace     combination of face and midPoint
//
//      curve               specified points, not nessecary on line, uses
//                          tracking
//      cloud               specified points, uses findCell
//
// axis: how to write point coordinate. Choice of
// - x/y/z: x/y/z coordinate only
// - xyz: three columns
//  (probably does not make sense for anything but raw)
// - distance: distance from start of sampling line (if uses line) or
//             distance from first specified sampling point
//
// type specific:
//      uniform, face, midPoint, midPointAndFace : start and end coordinate
//      uniform: extra number of sampling points
//      curve, cloud: list of coordinates
sets
(
    x-6
    {
        type        uniform;
        axis        distance;

        start       (-5.87 -0.1 0. );
        end         (-5.87 4.7 0. );
        nPoints     80;
    }
    x+6
    {
        type        uniform;
        axis        distance;

        start       (5.98 -0.1 0. );
        end         (5.98 4.7 0. );
        nPoints     80;
    }
    x+14
       {
        type        uniform;
        axis        distance;

        start       (13.56 -0.1 0. );
        end         (13.56 4.7 0. );
        nPoints     80;
    }
    x+16
       {
        type        uniform;
        axis        distance;

        start       (16.14 -0.1 0. );
        end         (16.14 4.7 0. );
        nPoints     80;
    }
    x+17
       {
        type        uniform;
        axis        distance;

        start       (16.93 -0.1 0. );
        end         (16.93 4.7 0. );
        nPoints     80;
    }
    x+20
       {
        type        uniform;
        axis        distance;

        start       (20.32 -0.1 0. );
        end         (20.32 4.7 0. );
        nPoints     80;
    }
    x+24
       {
        type        uniform;
        axis        distance;

        start       (23.71 -0.1 0. );
        end         (23.71 4.7 0. );
        nPoints     80;
    }
    x+26
       {
        type        uniform;
        axis        distance;

        start       (26.30 -0.1 0. );
        end         (26.30 4.7 0. );
        nPoints     80;
    }
    x+27
       {
        type        uniform;
        axis        distance;

        start       (27.09 -0.1 0. );
        end         (27.09 4.7 0. );
        nPoints     80;
    }
    x+30
       {
        type        uniform;
        axis        distance;

        start       (30.48 -0.1 0. );
        end         (30.48 4.7 0. );
        nPoints     80;
    }
    x+33
       {
        type        uniform;
        axis        distance;

        start       (33.07 -0.1 0. );
        end         (33.07 4.7 0. );
        nPoints     80;
    }
    x+34
       {
        type        uniform;
        axis        distance;

        start       (33.87 -0.1 0. );
        end         (33.87 4.7 0. );
        nPoints     80;
    }
    x+40
       {
        type        uniform;
        axis        distance;

        start       (39.85 -0.1 0. );
        end         (39.85 4.7 0. );
        nPoints     80;
    }
    x+47
       {
        type        uniform;
        axis        distance;

        start       (46.62 -0.1 0. );
        end         (46.62 4.7 0. );
        nPoints     80;
    }
    x+53
       {
        type        uniform;
        axis        distance;

        start       (53.39 -0.1 0. );
        end         (53.39 4.7 0. );
        nPoints     80;
    }
);


// Surface sampling definition: choice of
//      plane : values on plane defined by point, normal.
//      patch : values on patch.
//
// 1] patches are not triangulated by default
// 2] planes are always triangulated
// 3] iso-surfaces are always triangulated

//surfaces ();

// *********************************************************************** //
